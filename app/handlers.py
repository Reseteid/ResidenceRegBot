from aiogram import F, Router
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from email_validator import validate_email, EmailNotValidError
from passlib.context import CryptContext
from yagmail import SMTP

import app.keyboards as kb
import app.database.requests as rq
from app.email import generate_code_and_send_email
from app.help import help_string

router = Router()

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def is_valid_email(email):
    try:
        v = validate_email(email)
        return True
    except EmailNotValidError:
        return False

class Registration(StatesGroup):
    tg_id = State()
    fio = State()
    adress = State()
    login = State()
    email = State()
    skip_email = State()
    password = State()
    confirm_password = State()

class Login(StatesGroup):
    login = State()
    password = State()

class Recovery(StatesGroup):
    recovery_password = State()
    code = State()
    password = State()
    confirm_password = State()


@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.full_name}! \n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ: \n1Ô∏è‚É£ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - –µ—Å–ª–∏ –≤—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç. \n2Ô∏è‚É£ –í–æ–π—Ç–∏ - –µ—Å–ª–∏ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–≤–æ—é —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å.', reply_markup= kb.main)

@router.message(Command('cancel'))
async def cmd_cancel(message: Message, state: FSMContext):
    await message.answer('–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∞')
    await state.clear()

@router.message(F.text == '–ü–æ–º–æ—â—å‚ùì')
async def button_help(message: Message):
    await message.answer(help_string)

@router.message(F.text == '–í–æ–π—Ç–∏ üîê')
async def start_login(message: Message, state: FSMContext):
    await state.set_state(Login.login)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")

@router.message(F.text == '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è üîë')
async def start_registration(message: Message, state: FSMContext):
    await state.set_state(Registration.tg_id)
    await state.update_data(tg_id = message.from_user.id)
    await state.set_state(Registration.fio)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –§–ò–û')

@router.message(Registration.fio)
async def registration_fio(message: Message, state: FSMContext):
    await state.update_data(fio = message.text)
    await state.set_state(Registration.adress)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è')

@router.message(Registration.adress)
async def registration_adress(message: Message, state: FSMContext):
    await state.update_data(adress = message.text)
    await state.set_state(Registration.login)
    await message.answer('–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ª–æ–≥–∏–Ω –∞–∫–∫–∞—É–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏')

@router.message(Registration.login)
async def registration_login(message: Message, state: FSMContext):
    if await rq.check_login(message.text):
        await message.reply('–õ–æ–≥–∏–Ω –∑–∞–Ω—è—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–æ–≤—ã–π')
    else:
        await state.update_data(login = message.text)
        await state.set_state(Registration.email)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è', reply_markup= kb.skip_email)

@router.message(Registration.email)
async def registration_email(message: Message, state: FSMContext):
    if is_valid_email(message.text) == False:
        await message.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –µ—â–µ —Ä–∞–∑')
    else: 
        if await rq.check_email(message.text):
            await message.reply('–î–∞–Ω–Ω–∞—è –ø–æ—á—Ç–∞ –∑–∞–Ω—è—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥—É—é –∏–ª–∏ –≤–æ–π–¥–∏—Ç–µ –≤ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç')
        else:
            await state.update_data(email = message.text)
            await state.set_state(Registration.password)
            await message.answer('–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –∑–∞—â–∏—Ç—ã –∞–∫–∫–∞—É–Ω—Ç–∞')

@router.message(Registration.skip_email)
async def registration_email(message: Message, state: FSMContext):
    await message.answer('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞, –ø–æ–∂–∞–ª—É–π—Ç—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∏–∂–µ', reply_markup= kb.choice)
    await message.answer('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥? \n–í–≤–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –≤ –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ', reply_markup= kb.choice)

@router.message(Registration.password)
async def registration_password(message: Message, state: FSMContext):
    await state.update_data(password = message.text)
    await state.set_state(Registration.confirm_password)
    await message.answer('–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å')

@router.message(Registration.confirm_password)
async def registration_—Åonfirm_password(message: Message, state: FSMContext):
    confirm_hashed_password = pwd_context.hash(message.text)
    data = await state.get_data()
    if data['password']!= message.text:
        await message.answer('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –ø–æ–∂–∞–ª—É–π—Ç—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∑–∞–Ω–æ–≤–æ')
        await state.set_state(Registration.password)
    else:
        await state.set_state(Registration.password)
        await state.update_data(password = confirm_hashed_password)
        data = await state.get_data()
        try:
            if (await rq.add_user(data)):
                await message.answer(f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ üîì\n–í–∞—à–µ –∏–º—è: {data["fio"]}\n–í–∞—à –ª–æ–≥–∏–Ω: {data["login"]}')
        except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await state.clear()

@router.callback_query(F.data == 'skip')
async def get_katalog(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Registration.skip_email)
    await callback.message.edit_text('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥? \n–í–≤–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è –≤ –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ', reply_markup= kb.choice)

@router.callback_query(F.data == "Yes")
async def choice_email_Yes(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Registration.email)
    await state.update_data(email = None)
    await state.set_state(Registration.password)
    await callback.message.edit_text('–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–∞–¥–µ–∂–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –∑–∞—â–∏—Ç—ã –∞–∫–∫–∞—É–Ω—Ç–∞')

@router.callback_query(F.data == "No")
async def choice_email_No(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Registration.email)
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è', reply_markup= kb.skip_email)

@router.message(Login.login)
async def Login_login(message: Message, state: FSMContext):
    await state.update_data(login = message.text)
    await state.set_state(Login.password)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞')

@router.message(Login.password)
async def Login_login(message: Message, state: FSMContext):
    await state.update_data(password = message.text)
    data = await state.get_data()
    if await rq.verify_credentials(data):
        await message.answer('–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ', reply_markup= kb.link_to_profile)
    else:
        await message.answer('–ù–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–π –ø–∞—Ä—ã –ª–æ–≥–∏–Ω-–ø–∞—Ä–æ–ª—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–∞—Ä–æ–ª—å', reply_markup= kb.recovery_password)
    await state.clear()

@router.callback_query(F.data == 'RecoveryPassword')
async def recovery_pass(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Recovery.recovery_password)
    await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã, –∫–æ—Ç–æ—Ä—ã–∏ÃÜ –≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')

@router.message(Recovery.recovery_password)
async def Login_recovery_pass(message: Message, state: FSMContext):
    if await rq.email_exists(message.text):
        await state.update_data(recovery_password = message.text)
        code = generate_code_and_send_email(message.text)
        await state.set_state(Recovery.code)
        await state.update_data(code = code)
        await message.answer('–ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ')
    else:
        await message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –∞–∫–∫–∞—É–Ω—Ç–∞ —Å —Ç–∞–∫–æ–π –ø–æ—á—Ç–æ–π –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
        await state.clear()

@router.message(Recovery.code)
async def Login_recovery_pass(message: Message, state: FSMContext):
    data = await state.get_data()
    if message.text == data["code"]:
        await state.set_state(Recovery.password)
        await message.answer('–í–≤–µ–¥–µ–Ω –≤–µ—Ä–Ω—ã–π –∫–æ–¥, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å')
    else:
        await message.answer('–í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥')
        await state.clear()

@router.message(Recovery.password)
async def recovery_new_pass(message: Message, state: FSMContext):
    await state.update_data(password = message.text)
    await state.set_state(Recovery.confirm_password)
    await message.answer('–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–∞—Ä–æ–ª—å')

@router.message(Recovery.confirm_password)
async def recovery_—Åonfirm_password(message: Message, state: FSMContext):
    data = await state.get_data()
    if message.text != data["password"]:
        await message.answer('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç, –ø–æ–∂–∞–ª—É–π—Ç—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∑–∞–Ω–æ–≤–æ')
        await state.set_state(Registration.password)
    else:
        hashed_password = pwd_context.hash(message.text)
        await state.update_data(password = hashed_password)
        data = await state.get_data()
        try:
            if (await rq.update_user_password_by_email(data)):
                await message.answer("–í–∞—à –ø–∞—Ä–æ–ª—å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω")
        except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è: {e}")
        await state.clear()